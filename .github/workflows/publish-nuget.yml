name: build-and-publish

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'  # Opcional: publicar solo cuando creas un tag v1.0.0, v1.2.3, etc.

jobs:
  build-and-publish:
    runs-on: ubuntu-latest

    steps:
      # 1) Hacer checkout del repo
      - name: Checkout repository
        uses: actions/checkout@v3

      # 2) Instalar .NET SDK (versión 8.0 en este ejemplo; pon la que necesites)
      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      # 3) Restaurar dependencias del proyecto
      - name: Restore dependencies
        run: |
          dotnet restore ./SasUrlGenerator/SasUrlGenerator.csproj

      # 4) Compilar y crear el paquete (GeneratePackageOnBuild = true en el csproj)
      - name: Build and pack
        run: |
          dotnet build ./SasUrlGenerator/SasUrlGenerator.csproj --configuration Release
          # Si tu csproj NO tiene <GeneratePackageOnBuild>true</GeneratePackageOnBuild>,
          # en lugar de "dotnet build" debes usar "dotnet pack", así:
          # dotnet pack ./SasUrlGenerator/SasUrlGenerator.csproj --configuration Release --no-build --output ./nupkgs

      # 5) Publicar en GitHub Packages
      - name: Publish to GitHub Packages
        env:
          # GITHUB_TOKEN es un token automático que GitHub Actions proporciona
          NUGET_XMLDOC_MODE: skip
        run: |
          # Busca el .nupkg generado en la carpeta bin/Release
          nupkg=$(find SasUrlGenerator/bin/Release -maxdepth 2 -name '*.nupkg' | head -n 1)
          echo "Found package: $nupkg"
          dotnet nuget push "$nupkg" \
            --api-key "${{ github.token }}" \
            --source "github"
